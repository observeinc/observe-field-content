Observe Copied Dashboard
Crowdstrike Execution Details
/* Observe!Start {"type":"dashboard","binding":{"datasets":[["45996199","Crowdstrike/Crowdstrike FDR Logs"]],"bindings":{"dataset_crowdstrike_crowdstrikeFDRLogs":"45996199"}},"data":{"id":"48831004","name":"Crowdstrike Execution Details","stages":[{"id":"stage-059q1wzv","input":[{"inputName":"Crowdstrike FDR Logs","parameterId":"input-parameter-5407fumu","inputRole":"Data"}],"layout":{"type":"table","index":0,"label":"Process","steps":[{"id":"step-7nadjsct","customName":"Input","customSummary":"Crowdstrike FDR Logs","index":0,"opal":[],"type":"InputStep","isPinned":false},{"id":"step-z3t0cqky","customSummary":"","index":1,"opal":["filter event_simpleName = \"ProcessRollup2\" or event_simpleName = \"SyntheticProcessRollup2\"","make_col ","    IsRootProcessID:case(","  not is_null(TargetProcessId) and is_null(ParentProcessId) and is_null(ContextProcessId), true,","  true, false",")","filter TargetProcessId = $AlertProcessID or is_null($AlertProcessID)","","make_col ImageFileName:string(_raw.ImageFileName)","make_col CommandLine:string(_raw.CommandLine)","make_col ParentFileName:string(_raw.ParentBaseFileName)","filter search(CommandLine, $CommandLine)","// go to the last \\ or / in the ImageFileName and grab everything after as the FileName","extract_regex ImageFileName, /(?P<FileName>[^\\\\\\/]+$)/","","//statsby group_by(^Computer...,TargetProcessId,ImageFileName,FileName,CommandLine,OGProcessID,PID)","","","//filter OGProcessID = true",""],"type":"unknown","isPinned":false}],"inputList":[{"id":"query-input-kw44mwbj","inputName":"Crowdstrike FDR Logs","isUserInput":true,"parameterId":"input-parameter-5407fumu","inputRole":"Data"}],"viewModel":{"showTimeRuler":true,"railCollapseState":{"inputsOutputs":false,"minimap":false,"note":true,"script":true},"stageTab":"table","builderOpalTab":"OPAL","stageOutputHeight":62.054329371816635,"inspectRailCollapsed":true,"inspectRailPinned":false,"inspectRailWidth":640,"thumbnailId":"f02ceu9y","consoleValue":null,"activeTab":"fieldsTab2","jsonViewMode":"json","shouldShowSearch":null,"timeScrubberHeight":40},"queryPresentation":{"rollup":{},"linkify":true,"loadEverything":false,"limit":10000,"columnStats":{"histogramBucketCount":"100","needDistinctCount":true,"topKCount":"100"},"volumeStats":{"bucketCount":"100","needTotalCount":true},"resultKinds":["ResultKindSchema","ResultKindData","ResultKindColumnStats","ResultKindVolumeStats","ResultKindProgress"],"progressive":true,"initialRollupFilter":{"mode":"Last"}},"renderType":"TABLE","isInternal":false,"disableOutput":false,"dataTableViewState":{"columnWidths":[["_raw",702],["CommandLine",472],["TargetProcessId",176],["Computer",194],["FileName",240],["OGProcessID",155],["IsOGProcessID",172],["ParentBaseFileName",195]],"tableWidth":774,"rowHeights":[],"defaultColumnWidth":70,"selection":{"columns":{},"rows":{},"cells":{"IsRootProcessID":{"416":true}},"highlightState":{},"columnSelectSequence":[],"selectionType":"cell"},"columnVisibility":[["event_simpleName",false]],"columnOrderOverride":[[1,"IsRootProcessID"],[0,"timestamp"],[2,"ParentBaseFileName"],[9,"ImageFileName"],[7,"aid"],[5,"CommandLine"],[4,"FileName"],[3,"ParentFileName"]],"minColumnWidth":60,"viewType":"Auto","preserveCellAndRowSelection":true,"disableFixedLeftColumns":false,"cellValuePresentation":[],"autoExpandColumnWidth":false},"serializable":true,"managers":[],"dataLinks":[],"cardLinks":[]},"pipeline":"filter event_simpleName = \"ProcessRollup2\" or event_simpleName = \"SyntheticProcessRollup2\"\nmake_col \n    IsRootProcessID:case(\n  not is_null(TargetProcessId) and is_null(ParentProcessId) and is_null(ContextProcessId), true,\n  true, false\n)\nfilter TargetProcessId = $AlertProcessID or is_null($AlertProcessID)\n\nmake_col ImageFileName:string(_raw.ImageFileName)\nmake_col CommandLine:string(_raw.CommandLine)\nmake_col ParentFileName:string(_raw.ParentBaseFileName)\nfilter search(CommandLine, $CommandLine)\n// go to the last \\ or / in the ImageFileName and grab everything after as the FileName\nextract_regex ImageFileName, /(?P<FileName>[^\\\\\\/]+$)/\n\n//statsby group_by(^Computer...,TargetProcessId,ImageFileName,FileName,CommandLine,OGProcessID,PID)\n\n\n//filter OGProcessID = true\n","index":0},{"id":"stage-sb45l1fy","input":[{"inputName":"Crowdstrike FDR Logs","parameterId":"input-parameter-5407fumu","inputRole":"Data"},{"inputName":"Process Triggering Alert","stageId":"stage-059q1wzv","inputRole":"Data"}],"layout":{"type":"table","index":1,"label":"Processes Parent","steps":[{"id":"step-lztind3c","customName":"Input","customSummary":"Crowdstrike FDR Logs","index":0,"opal":[],"type":"InputStep","isPinned":false},{"id":"step-znyigdqo","customSummary":"","index":1,"opal":["join on(TargetProcessId=@\"Process Triggering Alert\".ParentProcessId,frame(back:24h,ahead:24h)), AlertParentProcess:@\"Process Triggering Alert\".FileName","make_col ","    IsRootProcessID:case(","  not is_null(TargetProcessId) and is_null(ParentProcessId) and is_null(ContextProcessId), true,","  true, false",")","make_col ImageFileName:string(_raw.ImageFileName)","make_col CommandLine:string(_raw.CommandLine)","filter search(CommandLine, $CommandLine)","// go to the last \\ or / in the ImageFileName and grab everything after as the FileName","extract_regex ImageFileName, /(?P<FileName>[^\\\\\\/]+$)/","","// statsby group_by(^Computer...,ImageFileName,OriginalProcess,FileName,CommandLine,TargetProcessId,ContextProcessId,ParentProcessId)"],"type":"unknown","isPinned":false}],"inputList":[{"id":"query-input-qqvsbvk9","inputName":"Crowdstrike FDR Logs","isUserInput":true,"parameterId":"input-parameter-5407fumu","inputRole":"Data"},{"id":"query-input-jdnzpow5","inputName":"Process Triggering Alert","isUserInput":true,"stageId":"stage-059q1wzv","inputRole":"Data"}],"viewModel":{"showTimeRuler":true,"railCollapseState":{"inputsOutputs":false,"minimap":false,"note":true,"script":true},"stageTab":"table","builderOpalTab":"OPAL","stageOutputHeight":73.3446519524618,"inspectRailCollapsed":true,"inspectRailPinned":false,"inspectRailWidth":640,"thumbnailId":"seiqefda","consoleValue":null,"activeTab":"fieldsTab2","jsonViewMode":"json","shouldShowSearch":null,"timeScrubberHeight":40},"queryPresentation":{"rollup":{},"initialRollupFilter":{"mode":"Last"}},"isInternal":false,"disableOutput":false,"dataTableViewState":{"columnWidths":[["Computer",235],["event_simpleName",209],["CommandLine",732],["ImageFileName",709]],"tableWidth":550,"rowHeights":[],"defaultColumnWidth":70,"selection":{"columns":{},"rows":{},"cells":{},"highlightState":{},"columnSelectSequence":[],"selectionType":"table"},"columnVisibility":[],"columnOrderOverride":[[6,"ImageFileName"],[5,"CommandLine"],[4,"FileName"],[3,"OriginalProcess"],[1,"IsRootProcessID"],[0,"timestamp"]],"minColumnWidth":60,"viewType":"Auto","preserveCellAndRowSelection":true,"disableFixedLeftColumns":false,"cellValuePresentation":[],"autoExpandColumnWidth":false},"serializable":true,"managers":[],"dataLinks":[],"cardLinks":[]},"pipeline":"join on(TargetProcessId=@\"Process Triggering Alert\".ParentProcessId,frame(back:24h,ahead:24h)), AlertParentProcess:@\"Process Triggering Alert\".FileName\nmake_col \n    IsRootProcessID:case(\n  not is_null(TargetProcessId) and is_null(ParentProcessId) and is_null(ContextProcessId), true,\n  true, false\n)\nmake_col ImageFileName:string(_raw.ImageFileName)\nmake_col CommandLine:string(_raw.CommandLine)\nfilter search(CommandLine, $CommandLine)\n// go to the last \\ or / in the ImageFileName and grab everything after as the FileName\nextract_regex ImageFileName, /(?P<FileName>[^\\\\\\/]+$)/\n\n// statsby group_by(^Computer...,ImageFileName,OriginalProcess,FileName,CommandLine,TargetProcessId,ContextProcessId,ParentProcessId)","index":1},{"id":"stage-lp4d6xw2","input":[{"inputName":"Crowdstrike FDR Logs","parameterId":"input-parameter-5407fumu","inputRole":"Data"},{"inputName":"Process_-059q","stageId":"stage-059q1wzv","inputRole":"Data"}],"layout":{"type":"table","index":2,"label":"Spawned Contextual Events by Original Process","steps":[{"id":"step-z2gxuihy","customName":"Input","customSummary":"Crowdstrike FDR Logs","index":0,"opal":[],"type":"InputStep","isPinned":false},{"id":"step-ecda57a2","customSummary":"","index":1,"opal":["join on(ContextProcessId=@\"Process_-059q\".TargetProcessId,frame(back:24h,ahead:24h)), Process:@\"Process_-059q\".FileName","// make_col ImageFileName:string(_raw.ImageFileName)","// make_col CommandLine:string(_raw.CommandLine)","// filter search(CommandLine, $CommandLine)","// // go to the last \\ or / in the ImageFileName and grab everything after as the FileName","// extract_regex ImageFileName, /(?P<FileName>[^\\\\\\/]+$)/","","// statsby group_by(^Computer...,ImageFileName,FileName,CommandLine,ChildProcess,TargetProcessId,ContextProcessId,ParentProcessId,PID)"],"type":"unknown","isPinned":false}],"inputList":[{"id":"query-input-qqvsbvk9","inputName":"Crowdstrike FDR Logs","isUserInput":true,"parameterId":"input-parameter-5407fumu","inputRole":"Data"},{"id":"query-input-91z00puq","inputName":"Process_-059q","isUserInput":true,"stageId":"stage-059q1wzv","inputRole":"Data"}],"viewModel":{"showTimeRuler":true,"railCollapseState":{"inputsOutputs":false,"minimap":false,"note":true,"script":true},"stageTab":"table","builderOpalTab":"OPAL","stageOutputHeight":71.90152801358234,"inspectRailCollapsed":true,"inspectRailPinned":false,"inspectRailWidth":640,"thumbnailId":"tmaz2nl2","consoleValue":null,"activeTab":"fieldsTab2","jsonViewMode":"json","shouldShowSearch":null,"timeScrubberHeight":40},"queryPresentation":{"rollup":{},"initialRollupFilter":{"mode":"Last"}},"isInternal":false,"disableOutput":false,"dataTableViewState":{"columnWidths":[["Computer",235],["ImageFileName",737],["_raw",658]],"tableWidth":550,"rowHeights":[],"defaultColumnWidth":70,"selection":{"columns":{},"rows":{},"cells":{},"highlightState":{},"columnSelectSequence":[],"selectionType":"table"},"columnVisibility":[],"columnOrderOverride":[[5,"FileName"],[3,"_raw"],[2,"ChildProcess"],[1,"Process"]],"minColumnWidth":60,"viewType":"Auto","preserveCellAndRowSelection":true,"disableFixedLeftColumns":false,"cellValuePresentation":[],"autoExpandColumnWidth":false},"serializable":true,"managers":[],"dataLinks":[],"cardLinks":[]},"pipeline":"join on(ContextProcessId=@\"Process_-059q\".TargetProcessId,frame(back:24h,ahead:24h)), Process:@\"Process_-059q\".FileName\n// make_col ImageFileName:string(_raw.ImageFileName)\n// make_col CommandLine:string(_raw.CommandLine)\n// filter search(CommandLine, $CommandLine)\n// // go to the last \\ or / in the ImageFileName and grab everything after as the FileName\n// extract_regex ImageFileName, /(?P<FileName>[^\\\\\\/]+$)/\n\n// statsby group_by(^Computer...,ImageFileName,FileName,CommandLine,ChildProcess,TargetProcessId,ContextProcessId,ParentProcessId,PID)","index":2},{"id":"stage-0debo49r","input":[{"inputName":"Crowdstrike FDR Logs","parameterId":"input-parameter-5407fumu","inputRole":"Data"},{"inputName":"Process_-059q","stageId":"stage-059q1wzv","inputRole":"Data"}],"layout":{"type":"table","index":3,"label":"Spawned Process by Original Process","steps":[{"id":"step-9d8r7ku9","customName":"Input","customSummary":"Crowdstrike FDR Logs","index":0,"opal":[],"type":"InputStep","isPinned":false},{"id":"step-1ok263s0","customSummary":"","index":1,"opal":["join on(ParentProcessId=@\"Process_-059q\".TargetProcessId,frame(back:24h,ahead:24h)), OriginalProcess:@\"Process_-059q\".FileName","make_col ImageFileName:string(_raw.ImageFileName)","make_col CommandLine:string(_raw.CommandLine)","filter search(CommandLine, $CommandLine)","// go to the last \\ or / in the ImageFileName and grab everything after as the FileName","extract_regex ImageFileName, /(?P<FileName>[^\\\\\\/]+$)/","","// statsby group_by(^Computer...,ImageFileName,FileName,CommandLine,ChildProcess,TargetProcessId,ContextProcessId,ParentProcessId,PID)"],"type":"unknown","isPinned":false}],"inputList":[{"id":"query-input-qqvsbvk9","inputName":"Crowdstrike FDR Logs","isUserInput":true,"parameterId":"input-parameter-5407fumu","inputRole":"Data"},{"id":"query-input-aytcxvkx","inputName":"Process_-059q","isUserInput":true,"stageId":"stage-059q1wzv","inputRole":"Data"}],"viewModel":{"showTimeRuler":true,"railCollapseState":{"inputsOutputs":false,"minimap":false,"note":true,"script":true},"stageTab":"table","builderOpalTab":"OPAL","stageOutputHeight":71.90152801358234,"inspectRailCollapsed":true,"inspectRailPinned":false,"inspectRailWidth":640,"thumbnailId":"iru3pjbj","consoleValue":null,"activeTab":"fieldsTab2","jsonViewMode":"json","shouldShowSearch":null,"timeScrubberHeight":40},"queryPresentation":{"rollup":{},"initialRollupFilter":{"mode":"Last"}},"isInternal":false,"disableOutput":false,"dataTableViewState":{"columnWidths":[["Computer",146],["ImageFileName",737]],"tableWidth":774,"rowHeights":[],"defaultColumnWidth":70,"selection":{"columns":{"ContextProcessId":true},"rows":{},"cells":{},"highlightState":{},"columnSelectSequence":["ContextProcessId"],"selectionType":"column"},"columnVisibility":[],"columnOrderOverride":[[4,"FileName"],[3,"GrandChildProcess"],[2,"OriginalProcess"],[1,"Computer"],[12,"event_platform"],[6,"ImageFileName"],[5,"CommandLine"]],"minColumnWidth":60,"viewType":"Auto","preserveCellAndRowSelection":true,"disableFixedLeftColumns":false,"cellValuePresentation":[],"autoExpandColumnWidth":false},"serializable":true,"managers":[],"dataLinks":[],"cardLinks":[]},"pipeline":"join on(ParentProcessId=@\"Process_-059q\".TargetProcessId,frame(back:24h,ahead:24h)), OriginalProcess:@\"Process_-059q\".FileName\nmake_col ImageFileName:string(_raw.ImageFileName)\nmake_col CommandLine:string(_raw.CommandLine)\nfilter search(CommandLine, $CommandLine)\n// go to the last \\ or / in the ImageFileName and grab everything after as the FileName\nextract_regex ImageFileName, /(?P<FileName>[^\\\\\\/]+$)/\n\n// statsby group_by(^Computer...,ImageFileName,FileName,CommandLine,ChildProcess,TargetProcessId,ContextProcessId,ParentProcessId,PID)","index":3},{"id":"stage-bbvyst9n","input":[{"inputName":"Crowdstrike FDR Logs","parameterId":"input-parameter-5407fumu","inputRole":"Data"},{"inputName":"Process_-059q","stageId":"stage-059q1wzv","inputRole":"Data"}],"layout":{"type":"table","index":4,"label":"Remote Connections","steps":[{"id":"step-xhxzs8p5","customName":"Input","customSummary":"Crowdstrike FDR Logs","index":0,"opal":[],"type":"InputStep","isPinned":false},{"id":"step-ew7y9el8","customSummary":"","index":1,"opal":["filter event_simpleName = \"NetworkConnectIP4\"","join on(ContextProcessId=@\"Process_-059q\".TargetProcessId,frame(back:24h,ahead:24h)), OrignialProcess:@\"Process_-059q\".FileName","make_col RemoteAddressIP4:string(_raw.RemoteAddressIP4)","statsby  group_by(^Computer..., OrignialProcess,RemoteAddressIP4)"],"type":"unknown","isPinned":false}],"inputList":[{"id":"query-input-68cgdcp7","inputName":"Crowdstrike FDR Logs","isUserInput":false,"parameterId":"input-parameter-5407fumu","inputRole":"Data"},{"id":"query-input-360i3orf","inputName":"Process_-059q","isUserInput":true,"stageId":"stage-059q1wzv","inputRole":"Data"}],"viewModel":{"showTimeRuler":true,"railCollapseState":{"inputsOutputs":false,"minimap":false,"note":true,"script":true},"stageTab":"table","builderOpalTab":"OPAL","inspectRailCollapsed":true,"inspectRailPinned":false,"inspectRailWidth":640,"thumbnailId":"z44oydci","consoleValue":null,"activeTab":"fieldsTab2","jsonViewMode":"json","shouldShowSearch":null,"timeScrubberHeight":40},"queryPresentation":{"sort":[{"ascending":false,"columnName":"A_CrowdstrikeFDRLogs_count"}],"rollup":{},"initialRollupFilter":{"mode":"Last"}},"isInternal":false,"disableOutput":false,"dataTableViewState":{"columnWidths":[["Computer",150],["RemoteAddressIP4",268],["A_RemoteAddressIP4_count_distinct_exact",115]],"tableWidth":662,"rowHeights":[],"defaultColumnWidth":70,"selection":{"columns":{},"rows":{},"cells":{},"highlightState":{},"columnSelectSequence":[],"selectionType":"table"},"columnVisibility":[["A_CrowdstrikeFDRLogs_count",false],["A_RemoteAddressIP4_count_distinct_exact",false]],"columnOrderOverride":[[6,"RemoteAddressIP4"],[2,"RemoteAddressIP4"],[1,"OrignialProcess"]],"minColumnWidth":60,"viewType":"Auto","preserveCellAndRowSelection":true,"disableFixedLeftColumns":false,"cellValuePresentation":[],"autoExpandColumnWidth":false},"serializable":true,"managers":[],"dataLinks":[],"cardLinks":[]},"pipeline":"filter event_simpleName = \"NetworkConnectIP4\"\njoin on(ContextProcessId=@\"Process_-059q\".TargetProcessId,frame(back:24h,ahead:24h)), OrignialProcess:@\"Process_-059q\".FileName\nmake_col RemoteAddressIP4:string(_raw.RemoteAddressIP4)\nstatsby  group_by(^Computer..., OrignialProcess,RemoteAddressIP4)","index":4},{"id":"stage-tsi7ga9g","input":[{"inputName":"Crowdstrike FDR Logs","parameterId":"input-parameter-5407fumu","inputRole":"Data"},{"inputName":"Process_-059q","stageId":"stage-059q1wzv","inputRole":"Data"}],"layout":{"type":"table","index":5,"label":"DNS Requests","steps":[{"id":"step-5w1kb8y3","customName":"Input","customSummary":"Crowdstrike FDR Logs","index":0,"opal":[],"type":"InputStep","isPinned":false},{"id":"step-819iufju","customSummary":"","index":1,"opal":["filter event_simpleName = \"DnsRequest\"","join on(ContextProcessId=@\"Process_-059q\".TargetProcessId,frame(back:24h,ahead:24h)), OringalProcess:@\"Process_-059q\".FileName","make_col DomainName:string(_raw.DomainName)","filter search(DomainName, $DomainName)","statsby A_CrowdstrikeFDRLogs_count:count(), group_by(^Computer..., OringalProcess,DomainName,ContextProcessId)"],"type":"unknown","isPinned":false}],"inputList":[{"id":"query-input-a4zeldie","inputName":"Crowdstrike FDR Logs","isUserInput":true,"parameterId":"input-parameter-5407fumu","inputRole":"Data"},{"id":"query-input-n2mg2380","inputName":"Process_-059q","isUserInput":true,"stageId":"stage-059q1wzv","inputRole":"Data"}],"viewModel":{"showTimeRuler":true,"railCollapseState":{"inputsOutputs":false,"minimap":false,"note":true,"script":true},"stageTab":"table","builderOpalTab":"OPAL","inspectRailCollapsed":true,"inspectRailPinned":false,"inspectRailWidth":640,"thumbnailId":"o6rgb38z","consoleValue":null,"activeTab":"fieldsTab2","jsonViewMode":"json","shouldShowSearch":null,"timeScrubberHeight":40},"queryPresentation":{"sort":[{"ascending":false,"columnName":"A_CrowdstrikeFDRLogs_count"}],"rollup":{},"initialRollupFilter":{"mode":"Last"}},"isInternal":false,"disableOutput":false,"dataTableViewState":{"columnWidths":[["Computer",208],["DomainName",340]],"tableWidth":662,"rowHeights":[],"defaultColumnWidth":70,"selection":{"columns":{},"rows":{},"cells":{},"highlightState":{},"columnSelectSequence":[],"selectionType":"table"},"columnVisibility":[["A_CrowdstrikeFDRLogs_count",false]],"columnOrderOverride":[],"minColumnWidth":60,"viewType":"Auto","preserveCellAndRowSelection":true,"disableFixedLeftColumns":false,"cellValuePresentation":[],"autoExpandColumnWidth":false},"serializable":true,"managers":[],"dataLinks":[],"cardLinks":[]},"pipeline":"filter event_simpleName = \"DnsRequest\"\njoin on(ContextProcessId=@\"Process_-059q\".TargetProcessId,frame(back:24h,ahead:24h)), OringalProcess:@\"Process_-059q\".FileName\nmake_col DomainName:string(_raw.DomainName)\nfilter search(DomainName, $DomainName)\nstatsby A_CrowdstrikeFDRLogs_count:count(), group_by(^Computer..., OringalProcess,DomainName,ContextProcessId)","index":5},{"id":"stage-fzv27j2h","input":[{"inputName":"Crowdstrike FDR Logs","parameterId":"input-parameter-5407fumu","inputRole":"Data"},{"inputName":"Process_-059q","stageId":"stage-059q1wzv","inputRole":"Data"}],"layout":{"type":"table","index":6,"label":"Registry Updates","steps":[{"id":"step-ez1op5jj","customName":"Input","customSummary":"Crowdstrike FDR Logs","index":0,"opal":[],"type":"InputStep","isPinned":false},{"id":"step-p73h9gff","customSummary":"","index":1,"opal":["filter event_simpleName ~ reg*","join on(ContextProcessId=@\"Process_-059q\".TargetProcessId,frame(back:24h,ahead:24h)), OriginalProcess:@\"Process_-059q\".FileName"],"type":"unknown","isPinned":false},{"id":"step-n28smypp","customSummary":"string(_raw.RegObjectName)","index":2,"opal":["make_col RegObjectName:string(_raw.RegObjectName)"],"action":{"type":"ExtractJSON","params":{"autoConvertType":true,"checkedKeys":["RegObjectName"],"columnId":"_raw","columnType":"object","existingColumnIds":["timestamp","event_simpleName","event_platform","Computer","aid","PID","TargetProcessId","ContextProcessId","ParentProcessId","_raw","OriginalProcess"],"expandedKeys":["RegObjectName"],"extraKeys":[],"typeByPath":{"RegObjectName":"string"}},"summary":null},"type":"unknown","isPinned":false},{"id":"step-s4kmeee2","customSummary":"string(_raw.TargetFileName)","index":3,"opal":["make_col TargetFileName:string(_raw.TargetFileName)"],"action":{"type":"ExtractJSON","params":{"autoConvertType":true,"checkedKeys":["TargetFileName"],"columnId":"_raw","columnType":"object","existingColumnIds":["timestamp","event_simpleName","event_platform","Computer","aid","PID","TargetProcessId","ContextProcessId","ParentProcessId","_raw","RegObjectName","OriginalProcess"],"expandedKeys":["TargetFileName"],"extraKeys":[],"typeByPath":{"TargetFileName":"string"}},"summary":null},"type":"unknown","isPinned":false},{"id":"step-nxzq36ci","customSummary":"","index":4,"opal":["","make_col","     TargetFile:coalesce(RegObjectName,TargetFileName)"],"type":"unknown","isPinned":false}],"inputList":[{"id":"query-input-qluvsv72","inputName":"Crowdstrike FDR Logs","isUserInput":true,"parameterId":"input-parameter-5407fumu","inputRole":"Data"},{"id":"query-input-l0unubcj","inputName":"Process_-059q","isUserInput":true,"stageId":"stage-059q1wzv","inputRole":"Data"}],"viewModel":{"showTimeRuler":true,"railCollapseState":{"inputsOutputs":false,"minimap":false,"note":true,"script":true},"stageTab":"table","builderOpalTab":"OPAL","inspectRailCollapsed":true,"inspectRailPinned":false,"inspectRailWidth":346,"thumbnailId":"n3b3awrq","consoleValue":null,"activeTab":"fieldsTab2","jsonViewMode":"json","shouldShowSearch":null,"timeScrubberHeight":40},"queryPresentation":{"sort":[{"ascending":false,"columnName":"A_CrowdstrikeFDRLogs_count"}],"rollup":{},"initialRollupFilter":{"mode":"Last"}},"isInternal":false,"disableOutput":false,"dataTableViewState":{"columnWidths":[["RegObjectName",766],["RegStringValue",1582],["OriginalProcess",352],["TargetFile",1145.9]],"tableWidth":1336,"rowHeights":[],"defaultColumnWidth":70,"selection":{"columns":{},"rows":{},"cells":{},"highlightState":{},"columnSelectSequence":[],"selectionType":"table"},"columnVisibility":[["A_CrowdstrikeFDRLogs_count",false],["RegObjectName",false],["TargetFileName",false]],"columnOrderOverride":[[4,"OriginalProcess"],[3,"RegObjectName"],[2,"TargetFile"]],"minColumnWidth":60,"viewType":"Auto","preserveCellAndRowSelection":true,"disableFixedLeftColumns":false,"cellValuePresentation":[],"autoExpandColumnWidth":false},"serializable":true,"managers":[],"dataLinks":[],"cardLinks":[]},"pipeline":"filter event_simpleName ~ reg*\njoin on(ContextProcessId=@\"Process_-059q\".TargetProcessId,frame(back:24h,ahead:24h)), OriginalProcess:@\"Process_-059q\".FileName\nmake_col RegObjectName:string(_raw.RegObjectName)\nmake_col TargetFileName:string(_raw.TargetFileName)\n\nmake_col\n     TargetFile:coalesce(RegObjectName,TargetFileName)","index":6},{"id":"stage-lu62uzjo","input":[{"inputName":"Crowdstrike FDR Logs","parameterId":"input-parameter-5407fumu","inputRole":"Data"},{"inputName":"Process_-059q","stageId":"stage-059q1wzv","inputRole":"Data"}],"layout":{"type":"table","index":7,"label":"Files Written","steps":[{"id":"step-9njankq2","customName":"Input","customSummary":"Crowdstrike FDR Logs","index":0,"opal":[],"type":"InputStep","isPinned":false},{"id":"step-u1y4iujh","customSummary":"","index":1,"opal":["filter event_simpleName ~ written","join on(ContextProcessId=@\"Process_-059q\".TargetProcessId,frame(back:24h,ahead:24h)), OriginalProcess:@\"Process_-059q\".FileName","make_col TargetFileName:string(_raw.TargetFileName)","// statsby A_CrowdstrikeFDRLogs_count:count(), group_by(^Computer..., event_simpleName, TargetFileName, ContextProcessId)"],"type":"unknown","isPinned":false}],"inputList":[{"id":"query-input-sd68zwcn","inputName":"Crowdstrike FDR Logs","isUserInput":false,"parameterId":"input-parameter-5407fumu","inputRole":"Data"},{"id":"query-input-x6n2ecey","inputName":"Process_-059q","isUserInput":true,"stageId":"stage-059q1wzv","inputRole":"Data"}],"viewModel":{"showTimeRuler":true,"railCollapseState":{"inputsOutputs":false,"minimap":false,"note":true,"script":true},"stageTab":"table","builderOpalTab":"OPAL","inspectRailCollapsed":true,"inspectRailPinned":false,"inspectRailWidth":640,"thumbnailId":"e2dj3xr6","consoleValue":null,"activeTab":"fieldsTab2","jsonViewMode":"json","shouldShowSearch":null,"timeScrubberHeight":40},"queryPresentation":{"sort":[{"ascending":false,"columnName":"A_CrowdstrikeFDRLogs_count"}],"rollup":{},"initialRollupFilter":{"mode":"Last"}},"isInternal":false,"disableOutput":false,"dataTableViewState":{"columnWidths":[["_raw",933],["TargetFileName",1141],["Computer",192]],"tableWidth":662,"rowHeights":[],"defaultColumnWidth":70,"selection":{"columns":{},"rows":{},"cells":{},"highlightState":{},"columnSelectSequence":[],"selectionType":"table"},"columnVisibility":[["A_CrowdstrikeFDRLogs_count",false]],"columnOrderOverride":[[5,"TargetFileName"],[2,"OriginalProcess"],[1,"Computer"]],"minColumnWidth":60,"viewType":"Auto","preserveCellAndRowSelection":true,"disableFixedLeftColumns":false,"cellValuePresentation":[],"autoExpandColumnWidth":false},"serializable":true,"managers":[],"dataLinks":[],"cardLinks":[]},"pipeline":"filter event_simpleName ~ written\njoin on(ContextProcessId=@\"Process_-059q\".TargetProcessId,frame(back:24h,ahead:24h)), OriginalProcess:@\"Process_-059q\".FileName\nmake_col TargetFileName:string(_raw.TargetFileName)\n// statsby A_CrowdstrikeFDRLogs_count:count(), group_by(^Computer..., event_simpleName, TargetFileName, ContextProcessId)","index":7},{"id":"stage-btinv4yd","input":[{"inputName":"Crowdstrike FDR Logs","parameterId":"input-parameter-5407fumu","inputRole":"Data"},{"inputName":"Process_-059q","stageId":"stage-059q1wzv","inputRole":"Data"}],"layout":{"type":"table","index":8,"label":"Call Stack Module Loading","steps":[{"id":"step-9oo2gm32","customName":"Input","customSummary":"Crowdstrike FDR Logs","index":0,"opal":[],"type":"InputStep","isPinned":false},{"id":"step-5q6pjuzb","customSummary":"","index":1,"opal":["join on(TargetProcessId=@\"Process_-059q\".TargetProcessId)","make_col CallStackModuleNames:string(_raw.CallStackModuleNames)","make_col normalizedField:replace_regex(CallStackModuleNames, /[(\\\\|\\\\\\\\)(\\\\\\\\)(+)]/, \",\")","make_col splitCallStack:split(normalizedField, \",\")","make_col CallStackFileNames:(get_regex_all(string(splitCallStack), /(\\w+\\.dll|\\w+.exe|\\w+\\.sh)/,\"i\"))","filter not is_null(CallStackModuleNames)","make_col ModuleLoadedOK:case (","     CallStackFileNames=(array(parse_json(\"[\\\"ntdll.dll\\\",\\\"KernelBase.dll\\\",\\\"kernel32.dll\\\",\\\"firefox.exe\\\"]\"))), \"LoadedOK\",","     CallStackFileNames = array(parse_json(\"[\\\"ntdll.dll\\\",\\\"KernelBase.dll\\\",\\\"kernel32.dll\\\",\\\"msedge.dll\\\"]\")), \"LoadedOK\",","     CallStackFileNames = array(parse_json(\"[\\\"ntdll.dll\\\",\\\"KernelBase.dll\\\",\\\"kernel32.dll\\\",\\\"chrome.dll\\\"]\")), \"LoadedOK\",","     CallStackFileNames = array(parse_json(\"[\\\"ntdll.dll\\\",\\\"KernelBase.dll\\\",\\\"advapi32.dll\\\",\\\"chrome.exe\\\",\\\"chrome.dll\\\",\\\"kernel32.dll\\\"]\")), \"LoadedOK\",","     true,\"NO\"",")","make_col ParentBaseFileName:string(_raw.ParentBaseFileName)","// pick_col","//     timestamp,","//     label(^Computer),","//     CallStackFileNames,","//     ModuleLoadedOK,","//     CallStackModuleNames,","//     ImageFileName:string(_raw.ImageFileName),","//     ParentBaseFileName:string(_raw.ParentBaseFileName),","//     GrandParentBaseFileName:string(_raw.GrandParentBaseFileName),","//     CommandLine:string(_raw.CommandLine),","//     TargetProcessId,","//     ParentProcessId","","","","",""],"type":"unknown","isPinned":false}],"inputList":[{"id":"query-input-8n937ynb","inputName":"Crowdstrike FDR Logs","isUserInput":true,"parameterId":"input-parameter-5407fumu","inputRole":"Data"},{"id":"query-input-70bea6w0","inputName":"Process_-059q","isUserInput":true,"stageId":"stage-059q1wzv","inputRole":"Data"}],"viewModel":{"showTimeRuler":true,"railCollapseState":{"inputsOutputs":false,"minimap":false,"note":true,"script":true},"stageTab":"table","builderOpalTab":"OPAL","stageOutputHeight":64.94057724957555,"inspectRailCollapsed":true,"inspectRailPinned":false,"inspectRailWidth":640,"thumbnailId":"zmtgkusf","consoleValue":null,"activeTab":"fieldsTab2","jsonViewMode":"json","shouldShowSearch":null,"timeScrubberHeight":40},"queryPresentation":{"rollup":{},"initialRollupFilter":{"mode":"Last"}},"isInternal":false,"disableOutput":false,"dataTableViewState":{"columnWidths":[["ModuleLoadedOK",198],["CallStackFileNames",732],["ParentBaseFileName",220]],"tableWidth":662,"rowHeights":[],"defaultColumnWidth":70,"selection":{"columns":{},"rows":{},"cells":{},"highlightState":{},"columnSelectSequence":[],"selectionType":"table"},"columnVisibility":[["event_simpleName",false]],"columnOrderOverride":[[8,"splitCallStack"],[7,"CallStackModuleNames"],[4,"CallStackFileNames"],[3,"ParentBaseFileName"],[2,"ModuleLoadedOK"]],"minColumnWidth":60,"viewType":"Auto","preserveCellAndRowSelection":true,"disableFixedLeftColumns":false,"cellValuePresentation":[],"autoExpandColumnWidth":false},"serializable":true,"managers":[],"dataLinks":[],"cardLinks":[]},"pipeline":"join on(TargetProcessId=@\"Process_-059q\".TargetProcessId)\nmake_col CallStackModuleNames:string(_raw.CallStackModuleNames)\nmake_col normalizedField:replace_regex(CallStackModuleNames, /[(\\\\|\\\\\\\\)(\\\\\\\\)(+)]/, \",\")\nmake_col splitCallStack:split(normalizedField, \",\")\nmake_col CallStackFileNames:(get_regex_all(string(splitCallStack), /(\\w+\\.dll|\\w+.exe|\\w+\\.sh)/,\"i\"))\nfilter not is_null(CallStackModuleNames)\nmake_col ModuleLoadedOK:case (\n     CallStackFileNames=(array(parse_json(\"[\\\"ntdll.dll\\\",\\\"KernelBase.dll\\\",\\\"kernel32.dll\\\",\\\"firefox.exe\\\"]\"))), \"LoadedOK\",\n     CallStackFileNames = array(parse_json(\"[\\\"ntdll.dll\\\",\\\"KernelBase.dll\\\",\\\"kernel32.dll\\\",\\\"msedge.dll\\\"]\")), \"LoadedOK\",\n     CallStackFileNames = array(parse_json(\"[\\\"ntdll.dll\\\",\\\"KernelBase.dll\\\",\\\"kernel32.dll\\\",\\\"chrome.dll\\\"]\")), \"LoadedOK\",\n     CallStackFileNames = array(parse_json(\"[\\\"ntdll.dll\\\",\\\"KernelBase.dll\\\",\\\"advapi32.dll\\\",\\\"chrome.exe\\\",\\\"chrome.dll\\\",\\\"kernel32.dll\\\"]\")), \"LoadedOK\",\n     true,\"NO\"\n)\nmake_col ParentBaseFileName:string(_raw.ParentBaseFileName)\n// pick_col\n//     timestamp,\n//     label(^Computer),\n//     CallStackFileNames,\n//     ModuleLoadedOK,\n//     CallStackModuleNames,\n//     ImageFileName:string(_raw.ImageFileName),\n//     ParentBaseFileName:string(_raw.ParentBaseFileName),\n//     GrandParentBaseFileName:string(_raw.GrandParentBaseFileName),\n//     CommandLine:string(_raw.CommandLine),\n//     TargetProcessId,\n//     ParentProcessId\n\n\n\n\n","index":8},{"id":"stage-nr0i57gu","input":[{"inputName":"Process_-059q","stageId":"stage-059q1wzv","inputRole":"Data"},{"inputName":"Crowdstrike FDR Logs","parameterId":"input-parameter-5407fumu","inputRole":"Data"}],"layout":{"type":"table","index":9,"label":"Raw Logs","steps":[{"id":"step-gh16s11u","customName":"Input","customSummary":"Process_-059q","index":0,"opal":[],"type":"InputStep","isPinned":false},{"id":"step-0d3bimou","customSummary":"","index":1,"opal":["follow TargetProcessId=@\"Crowdstrike FDR Logs\".TargetProcessId or TargetProcessId=@\"Crowdstrike FDR Logs\".ContextProcessId","//filter event_simpleName = \"ProcessRollup2\" or event_simpleName = \"SyntheticProcessRollup2\"","// make_col CommandLine:string(_raw.CommandLine),","//     ImageFileName:string(_raw.ImageFileName),","//     OriginalFilename:string(_raw.OriginalFilename),","//     ParentBaseFileName:string(_raw.ParentBaseFileName)"],"type":"unknown","isPinned":false}],"inputList":[{"id":"query-input-2c4dngmh","inputName":"Process_-059q","isUserInput":true,"stageId":"stage-059q1wzv","inputRole":"Data"},{"id":"query-input-hl9ep055","inputName":"Crowdstrike FDR Logs","isUserInput":true,"parameterId":"input-parameter-5407fumu","inputRole":"Data"}],"viewModel":{"showTimeRuler":true,"railCollapseState":{"inputsOutputs":false,"minimap":false,"note":true,"script":true},"stageTab":"table","builderOpalTab":"OPAL","inspectRailCollapsed":true,"inspectRailPinned":false,"inspectRailWidth":640,"thumbnailId":"b8okqxyl","consoleValue":null,"activeTab":"fieldsTab2","jsonViewMode":"json","shouldShowSearch":null,"timeScrubberHeight":40},"queryPresentation":{"rollup":{},"initialRollupFilter":{"mode":"Last"}},"isInternal":false,"disableOutput":false,"dataTableViewState":{"columnWidths":[["Computer",235]],"tableWidth":1336,"rowHeights":[],"defaultColumnWidth":70,"selection":{"columns":{"ParentProcessId":true},"rows":{},"cells":{},"highlightState":{},"columnSelectSequence":["ParentProcessId"],"selectionType":"column"},"columnVisibility":[],"columnOrderOverride":[],"minColumnWidth":60,"viewType":"Auto","preserveCellAndRowSelection":true,"disableFixedLeftColumns":false,"cellValuePresentation":[],"autoExpandColumnWidth":false},"serializable":true,"managers":[],"dataLinks":[],"cardLinks":[]},"pipeline":"follow TargetProcessId=@\"Crowdstrike FDR Logs\".TargetProcessId or TargetProcessId=@\"Crowdstrike FDR Logs\".ContextProcessId\n//filter event_simpleName = \"ProcessRollup2\" or event_simpleName = \"SyntheticProcessRollup2\"\n// make_col CommandLine:string(_raw.CommandLine),\n//     ImageFileName:string(_raw.ImageFileName),\n//     OriginalFilename:string(_raw.OriginalFilename),\n//     ParentBaseFileName:string(_raw.ParentBaseFileName)","index":9}],"layout":{"stageListLayout":{"timeRange":{"display":"Past 30 days","millisFromCurrentTime":2592000000,"startTime":1742156928879,"endTime":1744748928879,"timeRangeInfo":{"key":"PRESETS","name":"Presets","presetType":"PAST_30_DAYS"},"originalDisplay":"Past 30 days"},"isModified":false,"selectedStageId":"stage-059q1wzv","parameters":[{"id":"input-parameter-5407fumu","name":"Crowdstrike FDR Logs","valueKind":{"type":"DATASETREF"},"defaultValue":{"datasetref":{"datasetId":"$dataset_crowdstrike_crowdstrikeFDRLogs"}},"viewType":"input","emptyValueEncoding":"null","emptyValueLabelOption":"null","datasetId":"$dataset_crowdstrike_crowdstrikeFDRLogs","autoApply":true,"filterActions":[],"preFilterActions":[]},{"id":"CommandLine","name":"CommandLine","valueKind":{"type":"STRING"},"defaultValue":{"string":""},"viewType":"text","allowEmpty":true,"emptyValueEncoding":"Empty String","emptyValueLabelOption":"null"},{"id":"DomainName","name":"DomainName","valueKind":{"type":"STRING"},"defaultValue":{"string":""},"viewType":"text","allowEmpty":true,"emptyValueEncoding":"Empty String","emptyValueLabelOption":"null"},{"id":"AlertProcessID","name":"AlertProcessID or TargetProcessID","valueKind":{"type":"INT64"},"defaultValue":{"int64":null},"viewType":"numeric","allowEmpty":true,"emptyValueEncoding":"null","emptyValueLabelOption":"null"}]},"gridLayout":{"sections":[{"card":{"cardType":"section","closed":false,"title":"Dashboard content"},"items":[{"card":{"cardType":"parameter","parameterId":"CommandLine"},"layout":{"w":3,"h":4,"x":4,"y":0,"resizeHandles":["e","w"]}},{"card":{"cardType":"parameter","parameterId":"DomainName"},"layout":{"w":3,"h":4,"x":7,"y":0,"resizeHandles":["e","w"]}},{"card":{"cardType":"parameter","parameterId":"AlertProcessID"},"layout":{"w":4,"h":4,"x":0,"y":0,"resizeHandles":["e","w"]}},{"card":{"cardType":"stage","stageId":"stage-059q1wzv"},"layout":{"w":7,"h":20,"x":0,"y":4}},{"card":{"cardType":"stage","stageId":"stage-sb45l1fy"},"layout":{"w":5,"h":12,"x":7,"y":4}},{"card":{"cardType":"stage","stageId":"stage-lp4d6xw2"},"layout":{"w":5,"h":27,"x":7,"y":16}},{"card":{"cardType":"stage","stageId":"stage-0debo49r"},"layout":{"w":7,"h":19,"x":0,"y":24}},{"card":{"cardType":"stage","stageId":"stage-lu62uzjo"},"layout":{"w":6,"h":19,"x":0,"y":43}},{"card":{"cardType":"stage","stageId":"stage-btinv4yd"},"layout":{"w":6,"h":19,"x":6,"y":43}},{"card":{"cardType":"stage","stageId":"stage-tsi7ga9g"},"layout":{"w":6,"h":19,"x":0,"y":62}},{"card":{"cardType":"stage","stageId":"stage-bbvyst9n"},"layout":{"w":6,"h":19,"x":6,"y":62}},{"card":{"cardType":"stage","stageId":"stage-fzv27j2h"},"layout":{"w":12,"h":23,"x":0,"y":81}},{"card":{"cardType":"stage","stageId":"stage-nr0i57gu"},"layout":{"w":12,"h":54,"x":0,"y":104}}]}]},"autoPack":true},"parameters":[{"id":"input-parameter-5407fumu","name":"Crowdstrike FDR Logs","valueKind":{"type":"DATASETREF"},"defaultValue":{"datasetref":{"datasetId":"$dataset_crowdstrike_crowdstrikeFDRLogs"}},"viewType":"input","emptyValueEncoding":"null","emptyValueLabelOption":"null","datasetId":"$dataset_crowdstrike_crowdstrikeFDRLogs","autoApply":true,"filterActions":[],"preFilterActions":[]},{"id":"CommandLine","name":"CommandLine","valueKind":{"type":"STRING"},"defaultValue":{"string":""},"viewType":"text","allowEmpty":true,"emptyValueEncoding":"Empty String","emptyValueLabelOption":"null"},{"id":"DomainName","name":"DomainName","valueKind":{"type":"STRING"},"defaultValue":{"string":""},"viewType":"text","allowEmpty":true,"emptyValueEncoding":"Empty String","emptyValueLabelOption":"null"},{"id":"AlertProcessID","name":"AlertProcessID or TargetProcessID","valueKind":{"type":"INT64"},"defaultValue":{"int64":null},"viewType":"numeric","allowEmpty":true,"emptyValueEncoding":"null","emptyValueLabelOption":"null"}],"viewState":{"editTab":"Design"},"createdByInfo":{"userId":"2673","userLabel":"Keith Buswell","userTimezone":"","userLocale":""},"createdDate":"2025-04-01T19:30:34Z","updatedByInfo":{"userId":"2673","userLabel":"Keith Buswell","userTimezone":"","userLocale":""},"updatedDate":"2025-04-10T17:52:10Z"}} Observe!End */
